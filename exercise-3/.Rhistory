```{r echo=FALSE}
library(ggplot2)
library(plotly)
```
```{r echo=FALSE, plotly=TRUE}
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
py <- plotly()
py$ggplot(gg1, session="knitr")
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r echo=FALSE}
library(ggplot2)
library(plotly)
```
```{r echo=FALSE, plotly=TRUE}
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
py <- plotly()
py$ggplot(gg1, session="knitr")
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
library(ggplot2)
library(plotly)
```
```{r echo=FALSE, plotly=TRUE}
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
py <- plotly()
py$ggplot(gg1, session="knitr")
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
source("exercise.R")
library(ggplot2)
library(plotly)
```
```{r echo=FALSE, plotly=TRUE}
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
py <- plotly()
py$ggplot(gg1, session="knitr")
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
source("exercise.R")
library(ggplot2)
library(plotly)
```
```{r echo=FALSE, plotly=TRUE}
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
py <- plotly()
py$ggplot(gg1, session="knitr")
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
library(ggplot2)
library(dplyr)
library(knitr)
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
```
```{r echo=FALSE, plotly=TRUE}
py <- plotly()
py$ggplot(gg1, session="knitr", kwargs=list(filename="exercise.R",
fileopt="overwrite"))
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
library(ggplot2)
library(dplyr)
library(knitr)
diamonds_sample <- sample_n(diamonds, 1000)
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
```
```{r echo=FALSE, plotly=TRUE}
py <- plotly()
py$ggplot(gg1, session="knitr", kwargs=list(filename="exercise.R",
fileopt="overwrite"))
```
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
library(ggplot2)
library(dplyr)
library(knitr)
```
```{r fig.width=7, fig.height=4, echo=FALSE}
library(ggplot2)
qplot(mpg, wt, data=mtcars)
```
```{r echo=FALSE, plotly=TRUE, fig.width=7, fig.height=6}
diamonds_sample <- sample_n(diamonds, 1000)
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
```
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut), shape = cut)
# Try coloring the above plot based on the diamond's price!
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
line_plot <- (diamonds, price , color, cut)
# That's kind of messy. Try using `smooth` geometry instead.
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
## Bonus
# Draw a bar chart of average diamond prices by clarity, and include "error bars"
# marking the standard error of each measurement.
#\facet <- (data= damionsalt)
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
install.packages("ggplot2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
library(ggplot2)
library(dplyr)
library(knitr)
```
```{r fig.width=7, fig.height=4, echo=FALSE}
library(ggplot2)
qplot(mpg, wt, data=mtcars)
```
```{r echo=FALSE, plotly=TRUE, fig.width=7, fig.height=6}
diamonds_sample <- sample_n(diamonds, 1000)
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
gg2 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
```
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
gg2 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
---
title: "Participation 6"
author: "Victoria Eng"
date: "5/4/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("exercise.R")
library(ggplot2)
library(dplyr)
library(knitr)
```
```{r echo=FALSE, plotly=TRUE, fig.width=7, fig.height=4}
diamonds_sample <- sample_n(diamonds, 1000)
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
gg2 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
```
```{r setup, echo=FALSE}
diamonds_sample <- sample_n(diamonds, 1000)
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
gg2 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
```{r echo=FALSE, plotly=TRUE, fig.width=7, fig.height=5}
```{r echo=FALSE, plotly=TRUE, fig.width=7, fig.height=6}
gg1 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
gg2 <- ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
gg2
gg1
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut), shape = cut)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut), shape = cut)
# Try coloring the above plot based on the diamond's price!
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
line_plot <- (diamonds, price , color, cut)
# That's kind of messy. Try using `smooth` geometry instead.
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
## Bonus
# Draw a bar chart of average diamond prices by clarity, and include "error bars"
# marking the standard error of each measurement.
#\facet <- (data= damionsalt)
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
install.packages("ggplot2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), shape = cut)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
geom_point(mapping = aes(x = carat, y = price), color = "blue")
gg5 <- ggplot(data = diamonds_sample)
gg5
diamonds_sample <- sample_n(diamonds, 1000)
diamonds_sample
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity),  size = 4) +
scale_color_brewer(palette = "Set3")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity),  size = 4) +
scale_color_brewer(palette = "Set3"))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity),  size = 4) +
scale_color_brewer(palette = "Set3")
# Geocode addresses: based on the following blog post
# http://www.storybench.org/geocode-csv-addresses-r/
# Use dev version of ggmaps so that you can set the Google Maps API key
# devtools::install_github("dkahle/ggmap")
library(ggmap)
library(dplyr)
# Load and google maps API key (you'll need to get your own)
source("api_key.R")
register_google(key = google_key)
# Load the raw data
library(ggmap)
raw_data <- read.csv("data/raw-shootings-2018.csv", stringsAsFactors = F) %>%
mutate(
lat = 0,
long = 0
)
# Loop through the addresses to get the latitude and longitude of each address,
# then add it to the raw_data data frame in new columns lat and lng
for (i in 1:nrow(raw_data)) {
# Print("Working...")
result <- geocode(raw_data$Address[i], output = "latlona", source = "google")
raw_data$long[i] <- as.numeric(result[1])
raw_data$lat[i] <- as.numeric(result[2])
}
# Rename columns
data <- raw_data %>%
select(
date = Incident.Date,
state = State,
city = City.Or.County,
address = Address,
num_killed = X..Killed,
num_injured = X..Injured,
lat, lng
)
# Write a CSV file containing raw_data to the working directory
write.csv(data, "data/shootings-2018.csv", row.names = FALSE)
# Geocode addresses: based on the following blog post
# http://www.storybench.org/geocode-csv-addresses-r/
# Use dev version of ggmaps so that you can set the Google Maps API key
# devtools::install_github("dkahle/ggmap")
library(ggmap)
library(dplyr)
# Load and google maps API key (you'll need to get your own)
source("api_key.R")
register_google(key = AIzaSyBpZzTJLrhzFOEh2g_Vv_aqjMJOs5CyHfc)
# Load the raw data
library(ggmap)
raw_data <- read.csv("data/raw-shootings-2018.csv", stringsAsFactors = F) %>%
mutate(
lat = 0,
long = 0
)
# Loop through the addresses to get the latitude and longitude of each address,
# then add it to the raw_data data frame in new columns lat and lng
for (i in 1:nrow(raw_data)) {
# Print("Working...")
result <- geocode(raw_data$Address[i], output = "latlona", source = "google")
raw_data$long[i] <- as.numeric(result[1])
raw_data$lat[i] <- as.numeric(result[2])
}
# Rename columns
data <- raw_data %>%
select(
date = Incident.Date,
state = State,
city = City.Or.County,
address = Address,
num_killed = X..Killed,
num_injured = X..Injured,
lat, lng
)
# Write a CSV file containing raw_data to the working directory
write.csv(data, "data/shootings-2018.csv", row.names = FALSE)
devtools::install_github("dkahle/ggmap")
# Geocode addresses: based on the following blog post
# http://www.storybench.org/geocode-csv-addresses-r/
# Use dev version of ggmaps so that you can set the Google Maps API key
devtools::install_github("dkahle/ggmap")
# Geocode addresses: based on the following blog post
# http://www.storybench.org/geocode-csv-addresses-r/
# Use dev version of ggmaps so that you can set the Google Maps API key
# devtools::install_github("dkahle/ggmap")
library(ggmap)
library(dplyr)
# Load and google maps API key (you'll need to get your own)
source("api_key.R")
register_google(key = google_key)
# Load the raw data
library(ggmap)
raw_data <- read.csv("data/raw-shootings-2018.csv", stringsAsFactors = F) %>%
mutate(
lat = 0,
long = 0
)
# Loop through the addresses to get the latitude and longitude of each address,
# then add it to the raw_data data frame in new columns lat and lng
for (i in 1:nrow(raw_data)) {
# Print("Working...")
result <- geocode(raw_data$Address[i], output = "latlona", source = "google")
raw_data$long[i] <- as.numeric(result[1])
raw_data$lat[i] <- as.numeric(result[2])
}
# Rename columns
data <- raw_data %>%
select(
date = Incident.Date,
state = State,
city = City.Or.County,
address = Address,
num_killed = X..Killed,
num_injured = X..Injured,
lat, lng
)
# Write a CSV file containing raw_data to the working directory
write.csv(data, "data/shootings-2018.csv", row.names = FALSE)
setwd("~/Desktop/info201/ch16-shiny/exercise-3")
shiny::runApp()
