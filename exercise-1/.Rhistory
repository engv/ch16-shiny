# interactive map to display more info on shootings
set <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("Grey86"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
us_map <- plot_geo(shootings_2018, locationmode = 'USA-states', sizes = c(10, 300)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~killed_injured, color = ~killed_injured,
text = ~paste(shootings_2018$city, ",",
shootings_2018$killed_injured, "casualties"), colors = c("Blue", "Red"),
hoverinfo = 'text'
) %>%
layout(title = 'US Shootings 2018', geo = set)
# plot detailing highlighted insights
plot <- ggplot(shootings_2018) + geom_label(mapping = aes(
x = shootings_2018$state, y = shootings_2018$killed_injured,
label = shootings_2018$state
)) + scale_x_continuous(limits = c(0, 70))
shootings_2018 <- shootings_2018[order(shootings_2018$state), ] %>%
group_by(state)
plot <- plot_ly(shootings_2018, x = ~num_injured, y = ~state, name = "Injured",
type = 'scatter', mode = "markers", marker = list(color = "red")) %>%
add_trace(x = ~num_killed, y = ~state, name = "Killed",type = 'scatter',
mode = "markers", marker = list(color = "black")) %>%
layout(
title = "2018 Shooting Casualties",
xaxis = list(title = "Affected People"),
margin = list(l = 100)
)
more_info
more_info <- "[this address](http://www.sun-sentinel.com/local/broward/parkland/florida-school-shooting/fl-sb-active-shooter-marjory-stoneman-high-20180214-story.html)"
more_info
more_info
---
title: "Shootings this Year"
author: "Victoria Eng"
date: "5/3/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(knitr)
source("summary.R")
```
## Summary Overview
This data set contains `r num_shootings` shootings that have occurred, with `r lives_lost` lives lost. `r city_impacted` was most impacted city this year, as it had the highest total amount of casualties (killed and injured).
Additionally, `r diff_cities` were all cities that were affected over these last few months.
## Summary Table
To briefly summarize the shooting incidents that have occurred this year so far, this table displays how many shootings there have been per month. As you can see, it was higher in the beginning of the year and has lessened as we approach mid-year.
```{r echo=FALSE}
kable(summary_table)
```
## A Closer Look
Let's take a closer look at the incident that happened on `r date_impacted` in `r city_impacted`, `r state_impacted`. This school shooting happened at Marjory Stoneman Douglas High, which is located on `r address_impacted`. It has been noted as one of the worst school shootings since Sandy Hook with `r killed_impacted` dead and still `r injured_impacted` more injured. Visit `r more_info` for more information and to see the original story.
```{r echo=FALSE}
plot(us_map)
```
---
title: "Shootings this Year"
author: "Victoria Eng"
date: "5/3/2018"
output: html_document
---
```{r setup, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(knitr)
source("summary.R")
```
## Summary Overview
This data set contains `r num_shootings` shootings that have occurred, with `r lives_lost` lives lost. `r city_impacted` was most impacted city this year, as it had the highest total amount of casualties (killed and injured).
Additionally, `r diff_cities` were all cities that were affected over these last few months.
## Summary Table
To briefly summarize the shooting incidents that have occurred this year so far, this table displays how many shootings there have been per month. As you can see, it was higher in the beginning of the year and has lessened as we approach mid-year.
```{r echo=FALSE}
#kable(summary_table)
```
## A Closer Look
Let's take a closer look at the incident that happened on `r date_impacted` in `r city_impacted`, `r state_impacted`. This school shooting happened at Marjory Stoneman Douglas High, which is located on `r address_impacted`. It has been noted as one of the worst school shootings since Sandy Hook with `r killed_impacted` dead and still `r injured_impacted` more injured. Visit `r more_info` for more information and to see the original story.
```{r echo=FALSE}
plot(us_map)
```
us_map <- plot_geo(shootings_2018, locationmode = 'USA-states', sizes = c(10, 300)) %>%
add_markers(
x = ~long, y = ~lat, size = ~killed_injured, color = ~killed_injured,
text = ~paste(shootings_2018$city, ",",
shootings_2018$killed_injured, "casualties"), colors = c("Blue", "Red"),
hoverinfo = 'text'
) %>%
layout(title = 'US Shootings 2018', geo = set)
us_map
# set up uri
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
# summary info code
library(ggmap)
shootings_2018 <- read.csv("data/shootings-2018.csv", stringsAsFactors = F)
# number of shootings
num_shootings <- nrow(shootings_2018)
# amount of lives lost
lives_lost <- sum(shootings_2018$num_killed)
# create new column to find how many killed and injured combined
shootings_2018 <- mutate(shootings_2018,
killed_injured =
shootings_2018$num_killed +
shootings_2018$num_injured
)
# city who had highest amount of both killed and injured combined
city_impacted <- shootings_2018$city[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured, na.rm = FALSE)]
diff_cities <- unique(shootings_2018$city)
# make custom summary table
custom_data <- select(shootings_2018, state, killed_injured, date)
custom_data <- mutate(custom_data, month = gsub(
"[[:digit:], ]+", "",
custom_data$date
))
summary_table <-
group_by(custom_data, month) %>%
summarise(num_shootings = n())
# specific shooting more details
state_impacted <- shootings_2018$state[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
date_impacted <- shootings_2018$date[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
address_impacted <- shootings_2018$address[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
killed_impacted <- shootings_2018$num_killed[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
injured_impacted <- shootings_2018$num_injured[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
more_info <- "[this address](http://www.sun-sentinel.com/local/broward/parkland/florida-school-shooting/fl-sb-active-shooter-marjory-stoneman-high-20180214-story.html)"
# interactive map to display more info on shootings
set <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("Grey86"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
us_map <- plot_geo(shootings_2018, locationmode = 'USA-states', sizes = c(10, 300)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~killed_injured, color = ~killed_injured,
text = ~paste(shootings_2018$city, ",",
shootings_2018$killed_injured, "casualties"), colors = c("Blue", "Red"),
hoverinfo = 'text'
) %>%
layout(title = 'US Shootings 2018', geo = set)
# plot detailing highlighted insights
plot <- ggplot(shootings_2018) + geom_label(mapping = aes(
x = shootings_2018$state, y = shootings_2018$killed_injured,
label = shootings_2018$state
)) + scale_x_continuous(limits = c(0, 70))
shootings_2018 <- shootings_2018[order(shootings_2018$state), ] %>%
group_by(state)
plot <- plot_ly(shootings_2018, x = ~num_injured, y = ~state, name = "Injured",
type = 'scatter', mode = "markers", marker = list(color = "red")) %>%
add_trace(x = ~num_killed, y = ~state, name = "Killed",type = 'scatter',
mode = "markers", marker = list(color = "black")) %>%
layout(
title = "2018 Shooting Casualties",
xaxis = list(title = "Affected People"),
margin = list(l = 100)
)
set <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("Grey86"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
us_map <- plot_geo(shootings_2018, locationmode = 'USA-states', sizes = c(10, 300)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~killed_injured, color = ~killed_injured,
text = ~paste(shootings_2018$city, ",",
shootings_2018$killed_injured, "casualties"), colors = c("Blue", "Red"),
hoverinfo = 'text'
) %>%
layout(title = 'US Shootings 2018', geo = set)
us_map
# set up uri
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
# summary info code
library(ggmap)
shootings_2018 <- read.csv("data/shootings-2018.csv", stringsAsFactors = F)
# number of shootings
num_shootings <- nrow(shootings_2018)
# amount of lives lost
lives_lost <- sum(shootings_2018$num_killed)
# create new column to find how many killed and injured combined
shootings_2018 <- mutate(shootings_2018,
killed_injured =
shootings_2018$num_killed +
shootings_2018$num_injured
)
# city who had highest amount of both killed and injured combined
city_impacted <- shootings_2018$city[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured, na.rm = FALSE)]
diff_cities <- unique(shootings_2018$city)
# make custom summary table
custom_data <- select(shootings_2018, state, killed_injured, date)
custom_data <- mutate(custom_data, month = gsub(
"[[:digit:], ]+", "",
custom_data$date
))
summary_table <-
group_by(custom_data, month) %>%
summarise(num_shootings = n())
# specific shooting more details
state_impacted <- shootings_2018$state[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
date_impacted <- shootings_2018$date[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
address_impacted <- shootings_2018$address[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
killed_impacted <- shootings_2018$num_killed[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
injured_impacted <- shootings_2018$num_injured[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
more_info <- "[this address](http://www.sun-sentinel.com/local/broward/parkland/florida-school-shooting/fl-sb-active-shooter-marjory-stoneman-high-20180214-story.html)"
# interactive map to display more info on shootings
set <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("Grey86"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
us_map <- plot_geo(shootings_2018, locationmode = 'USA-states', sizes = c(10, 300)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~killed_injured, color = ~killed_injured,
text = ~paste(shootings_2018$city, ",",
shootings_2018$killed_injured, "casualties"), colors = c("Blue", "Red"),
hoverinfo = 'text'
) %>%
layout(title = 'US Shootings 2018', geo = set)
# plot detailing highlighted insights
plot <- ggplot(shootings_2018) + geom_label(mapping = aes(
x = shootings_2018$state, y = shootings_2018$killed_injured,
label = shootings_2018$state
)) + scale_x_continuous(limits = c(0, 70))
shootings_2018 <- shootings_2018[order(shootings_2018$state), ] %>%
group_by(state)
plot <- plot_ly(shootings_2018, x = ~num_injured, y = ~state, name = "Injured",
type = 'scatter', mode = "markers", marker = list(color = "red")) %>%
add_trace(x = ~num_killed, y = ~state, name = "Killed",type = 'scatter',
mode = "markers", marker = list(color = "black")) %>%
layout(
title = "2018 Shooting Casualties",
xaxis = list(title = "Affected People"),
margin = list(l = 100)
)
us_map
# set up uri
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
# summary info code
library(ggmap)
shootings_2018 <- read.csv("data/shootings-2018.csv", stringsAsFactors = F)
# number of shootings
num_shootings <- nrow(shootings_2018)
# amount of lives lost
lives_lost <- sum(shootings_2018$num_killed)
# create new column to find how many killed and injured combined
shootings_2018 <- mutate(shootings_2018,
killed_injured =
shootings_2018$num_killed +
shootings_2018$num_injured
)
# city who had highest amount of both killed and injured combined
city_impacted <- shootings_2018$city[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured, na.rm = FALSE)]
diff_cities <- unique(shootings_2018$city)
# make custom summary table
custom_data <- select(shootings_2018, state, killed_injured, date)
custom_data <- mutate(custom_data, month = gsub(
"[[:digit:], ]+", "",
custom_data$date
))
summary_table <-
group_by(custom_data, month) %>%
summarise(num_shootings = n())
# specific shooting more details
state_impacted <- shootings_2018$state[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
date_impacted <- shootings_2018$date[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
address_impacted <- shootings_2018$address[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
killed_impacted <- shootings_2018$num_killed[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
injured_impacted <- shootings_2018$num_injured[shootings_2018$killed_injured ==
max(shootings_2018$killed_injured,
na.rm = FALSE
)]
more_info <- "[this address](http://www.sun-sentinel.com/local/broward/parkland/florida-school-shooting/fl-sb-active-shooter-marjory-stoneman-high-20180214-story.html)"
# interactive map to display more info on shootings
set <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("Grey86"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
us_map <- plot_geo(shootings_2018, locationmode = 'USA-states', sizes = c(10, 300)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~killed_injured, color = ~killed_injured,
text = ~paste(shootings_2018$city, ",",
shootings_2018$killed_injured, "casualties"), colors = c("Blue", "Red"),
hoverinfo = 'text'
) %>%
layout(title = 'US Shootings 2018', geo = set)
# plot detailing highlighted insights
plot <- ggplot(shootings_2018) + geom_label(mapping = aes(
x = shootings_2018$state, y = shootings_2018$killed_injured,
label = shootings_2018$state
)) + scale_x_continuous(limits = c(0, 70))
shootings_2018 <- shootings_2018[order(shootings_2018$state), ] %>%
group_by(state)
plot <- plot_ly(shootings_2018, x = ~num_injured, y = ~state, name = "Injured",
type = 'scatter', mode = "markers", marker = list(color = "red")) %>%
add_trace(x = ~num_killed, y = ~state, name = "Killed",type = 'scatter',
mode = "markers", marker = list(color = "black")) %>%
layout(
title = "2018 Shooting Casualties",
xaxis = list(title = "Affected People"),
margin = list(l = 100)
)
us_map
# Geocode addresses: based on the following blog post
# http://www.storybench.org/geocode-csv-addresses-r/
# Use dev version of ggmaps so that you can set the Google Maps API key
# devtools::install_github("dkahle/ggmap")
library(ggmap)
library(dplyr)
# Load and google maps API key (you'll need to get your own)
source("api_key.R")
register_google(key = google_key)
# Load the raw data
library(ggmap)
raw_data <- read.csv("data/raw-shootings-2018.csv", stringsAsFactors = F) %>%
mutate(
lat = 0,
long = 0
)
# Loop through the addresses to get the latitude and longitude of each address,
# then add it to the raw_data data frame in new columns lat and lng
for (i in 1:nrow(raw_data)) {
# Print("Working...")
result <- geocode(raw_data$Address[i], output = "latlona", source = "google")
raw_data$long[i] <- as.numeric(result[1])
raw_data$lat[i] <- as.numeric(result[2])
}
# Rename columns
data <- raw_data %>%
select(
date = Incident.Date,
state = State,
city = City.Or.County,
address = Address,
num_killed = X..Killed,
num_injured = X..Injured,
lat, lng
)
# Write a CSV file containing raw_data to the working directory
write.csv(data, "data/shootings-2018.csv", row.names = FALSE)
library(shiny)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
# Exercise 1: Building a user interface
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
shiny::runApp('~/Desktop/info201/ch16-shiny/exercise-1')
shiny::runApp('~/Desktop/info201/ch16-shiny/exercise-1')
shiny::runApp('~/Desktop/info201/ch16-shiny/exercise-1')
shiny::runApp('~/Desktop/info201/ch16-shiny/exercise-1')
shiny::runApp('~/Desktop/info201/ch16-shiny/exercise-1')
setwd("~/Desktop/info201/ch16-shiny/exercise-1")
shiny::runApp()
# Exercise 1: Building a user interface
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p("I AM", strong("SO"),
"EXCITED! This is my first shiny project that I am simply elated to complete"),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img(
"", src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("slidy slid sid can't wait for", em("dem"), "SLIDAS"),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
"slider",
"My First Slider", min = 0, max = 100, value = 50, step = 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Exercise 1: Building a user interface
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p("I AM", strong("SO"),
"EXCITED! This is my first shiny project that I am simply elated to complete"),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img(
"", src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("slidy slid sid can't wait for", em("dem"), "SLIDAS"),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
"slider",
"My First Slider", min = 0, max = 100, value = 50, step = 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
